
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000818  000008ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800116  00800116  000008c2  2**0
                  ALLOC
  3 .stab         00001be4  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000067f  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00002b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000a3  00000000  00000000  00002b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000441  00000000  00000000  00002bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001cb  00000000  00000000  0000302b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005eb  00000000  00000000  000031f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  000037e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000154  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f0  00000000  00000000  000039d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00003bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  c6:	0c 94 0a 04 	jmp	0x814	; 0x814 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Stop>:

void Stop() //Остановка актуатора
{
	while (1)
	{
		i=PINA; //Считываем порт ввода
  ce:	89 b3       	in	r24, 0x19	; 25
  d0:	80 93 1e 01 	sts	0x011E, r24
  d4:	10 92 1f 01 	sts	0x011F, r1
		if ((i & (1<<4)) == 0 ) //Проверка нажатия кнопки Стоп
  d8:	84 fd       	sbrc	r24, 4
  da:	f9 cf       	rjmp	.-14     	; 0xce <Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	93 ec       	ldi	r25, 0xC3	; 195
  e0:	a9 e0       	ldi	r26, 0x09	; 9
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	a0 40       	sbci	r26, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <Stop+0x14>
  ea:	00 c0       	rjmp	.+0      	; 0xec <Stop+0x1e>
  ec:	00 00       	nop
		{
		_delay_ms(200);
		PORTE=0;
  ee:	13 b8       	out	0x03, r1	; 3
		break;
		}	
	}
}
  f0:	08 95       	ret

000000f2 <Numeral>:

int Numeral(int temp) //База чисел 0...9
{
switch (temp)
  f2:	85 30       	cpi	r24, 0x05	; 5
  f4:	91 05       	cpc	r25, r1
  f6:	09 f4       	brne	.+2      	; 0xfa <Numeral+0x8>
  f8:	40 c0       	rjmp	.+128    	; 0x17a <Numeral+0x88>
  fa:	86 30       	cpi	r24, 0x06	; 6
  fc:	91 05       	cpc	r25, r1
  fe:	ac f4       	brge	.+42     	; 0x12a <Numeral+0x38>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	91 05       	cpc	r25, r1
 104:	71 f1       	breq	.+92     	; 0x162 <Numeral+0x70>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	91 05       	cpc	r25, r1
 10a:	3c f4       	brge	.+14     	; 0x11a <Numeral+0x28>
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	09 f1       	breq	.+66     	; 0x152 <Numeral+0x60>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	91 05       	cpc	r25, r1
 114:	09 f0       	breq	.+2      	; 0x118 <Numeral+0x26>
 116:	49 c0       	rjmp	.+146    	; 0x1aa <Numeral+0xb8>
 118:	20 c0       	rjmp	.+64     	; 0x15a <Numeral+0x68>
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	91 05       	cpc	r25, r1
 11e:	29 f1       	breq	.+74     	; 0x16a <Numeral+0x78>
 120:	84 30       	cpi	r24, 0x04	; 4
 122:	91 05       	cpc	r25, r1
 124:	09 f0       	breq	.+2      	; 0x128 <Numeral+0x36>
 126:	41 c0       	rjmp	.+130    	; 0x1aa <Numeral+0xb8>
 128:	24 c0       	rjmp	.+72     	; 0x172 <Numeral+0x80>
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	91 05       	cpc	r25, r1
 12e:	89 f1       	breq	.+98     	; 0x192 <Numeral+0xa0>
 130:	89 30       	cpi	r24, 0x09	; 9
 132:	91 05       	cpc	r25, r1
 134:	3c f4       	brge	.+14     	; 0x144 <Numeral+0x52>
 136:	86 30       	cpi	r24, 0x06	; 6
 138:	91 05       	cpc	r25, r1
 13a:	19 f1       	breq	.+70     	; 0x182 <Numeral+0x90>
 13c:	87 30       	cpi	r24, 0x07	; 7
 13e:	91 05       	cpc	r25, r1
 140:	a1 f5       	brne	.+104    	; 0x1aa <Numeral+0xb8>
 142:	23 c0       	rjmp	.+70     	; 0x18a <Numeral+0x98>
 144:	89 30       	cpi	r24, 0x09	; 9
 146:	91 05       	cpc	r25, r1
 148:	41 f1       	breq	.+80     	; 0x19a <Numeral+0xa8>
 14a:	8a 30       	cpi	r24, 0x0A	; 10
 14c:	91 05       	cpc	r25, r1
 14e:	69 f5       	brne	.+90     	; 0x1aa <Numeral+0xb8>
 150:	28 c0       	rjmp	.+80     	; 0x1a2 <Numeral+0xb0>
	{
	case (0): PORTB = qbuffer[0];
 152:	80 91 00 01 	lds	r24, 0x0100
 156:	88 bb       	out	0x18, r24	; 24
	break;
 158:	08 95       	ret
	case (1): PORTB = qbuffer[1];
 15a:	80 91 02 01 	lds	r24, 0x0102
 15e:	88 bb       	out	0x18, r24	; 24
	break;
 160:	08 95       	ret
	case (2): PORTB = qbuffer[2];
 162:	80 91 04 01 	lds	r24, 0x0104
 166:	88 bb       	out	0x18, r24	; 24
	break;
 168:	08 95       	ret
	case (3): PORTB = qbuffer[3];
 16a:	80 91 06 01 	lds	r24, 0x0106
 16e:	88 bb       	out	0x18, r24	; 24
	break;
 170:	08 95       	ret
	case (4): PORTB = qbuffer[4];
 172:	80 91 08 01 	lds	r24, 0x0108
 176:	88 bb       	out	0x18, r24	; 24
	break;
 178:	08 95       	ret
	case (5): PORTB = qbuffer[5];
 17a:	80 91 0a 01 	lds	r24, 0x010A
 17e:	88 bb       	out	0x18, r24	; 24
	break;
 180:	08 95       	ret
	case (6): PORTB = qbuffer[6];
 182:	80 91 0c 01 	lds	r24, 0x010C
 186:	88 bb       	out	0x18, r24	; 24
	break;
 188:	08 95       	ret
	case (7): PORTB = qbuffer[7];
 18a:	80 91 0e 01 	lds	r24, 0x010E
 18e:	88 bb       	out	0x18, r24	; 24
	break;
 190:	08 95       	ret
	case (8): PORTB = qbuffer[8];
 192:	80 91 10 01 	lds	r24, 0x0110
 196:	88 bb       	out	0x18, r24	; 24
	break;
 198:	08 95       	ret
	case (9): PORTB = qbuffer[9];
 19a:	80 91 12 01 	lds	r24, 0x0112
 19e:	88 bb       	out	0x18, r24	; 24
	break;
 1a0:	08 95       	ret
	case (10): PORTB = qbuffer[10];
 1a2:	80 91 14 01 	lds	r24, 0x0114
 1a6:	88 bb       	out	0x18, r24	; 24
	break;
 1a8:	08 95       	ret
	default: PORTB = qbuffer[0];
 1aa:	80 91 00 01 	lds	r24, 0x0100
 1ae:	88 bb       	out	0x18, r24	; 24
	break;
	}
}
 1b0:	08 95       	ret

000001b2 <raschet>:


void raschet()
{
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
PORTB=0;
 1ba:	18 ba       	out	0x18, r1	; 24
B=A/10;
 1bc:	e0 90 16 01 	lds	r14, 0x0116
 1c0:	f0 90 17 01 	lds	r15, 0x0117
 1c4:	00 91 18 01 	lds	r16, 0x0118
 1c8:	10 91 19 01 	lds	r17, 0x0119
 1cc:	c8 01       	movw	r24, r16
 1ce:	b7 01       	movw	r22, r14
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e2       	ldi	r20, 0x20	; 32
 1d6:	51 e4       	ldi	r21, 0x41	; 65
 1d8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divsf3>
 1dc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fixunssfsi>
 1e0:	36 2f       	mov	r19, r22
 1e2:	27 2f       	mov	r18, r23
 1e4:	60 93 1a 01 	sts	0x011A, r22
 1e8:	70 93 1b 01 	sts	0x011B, r23

if (PORTG==0b1)
 1ec:	80 91 65 00 	lds	r24, 0x0065
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	51 f4       	brne	.+20     	; 0x208 <raschet+0x56>
	{
	PORTG=0b10;
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	80 93 65 00 	sts	0x0065, r24
	Numeral(B);	
 1fa:	80 91 1a 01 	lds	r24, 0x011A
 1fe:	90 91 1b 01 	lds	r25, 0x011B
 202:	0e 94 79 00 	call	0xf2	; 0xf2 <Numeral>
 206:	28 c0       	rjmp	.+80     	; 0x258 <raschet+0xa6>
	}
else
	{
	B=B*10;
 208:	83 2f       	mov	r24, r19
 20a:	92 2f       	mov	r25, r18
 20c:	bc 01       	movw	r22, r24
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	68 0f       	add	r22, r24
 220:	79 1f       	adc	r23, r25
 222:	70 93 1b 01 	sts	0x011B, r23
 226:	60 93 1a 01 	sts	0x011A, r22
	C=A-B;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__floatunsisf>
 232:	9b 01       	movw	r18, r22
 234:	ac 01       	movw	r20, r24
 236:	c8 01       	movw	r24, r16
 238:	b7 01       	movw	r22, r14
 23a:	0e 94 83 02 	call	0x506	; 0x506 <__subsf3>
 23e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fixunssfsi>
 242:	dc 01       	movw	r26, r24
 244:	cb 01       	movw	r24, r22
 246:	90 93 1d 01 	sts	0x011D, r25
 24a:	80 93 1c 01 	sts	0x011C, r24
	PORTG=0b1;
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	20 93 65 00 	sts	0x0065, r18
	Numeral(C);	
 254:	0e 94 79 00 	call	0xf2	; 0xf2 <Numeral>
//PORTB=0;


//PORTG=1;
//_delay_ms(10);
}
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	08 95       	ret

00000262 <__vector_14>:




ISR( TIMER1_OVF_vect )// Прерывание по переполнению таймера
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	0b b6       	in	r0, 0x3b	; 59
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31

raschet();	
 288:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <raschet>
 
//ADCSRA = (1<<ADSC);//Запуск 1го преобразования АЦП


//Numeral(A);
TCNT1 = 6380;
 28c:	8c ee       	ldi	r24, 0xEC	; 236
 28e:	98 e1       	ldi	r25, 0x18	; 24
 290:	9d bd       	out	0x2d, r25	; 45
 292:	8c bd       	out	0x2c, r24	; 44
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0b be       	out	0x3b, r0	; 59
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <__vector_21>:

ISR(ADC_vect)//Прерывание по АЦП
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	0b b6       	in	r0, 0x3b	; 59
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
	A=ADCH/2.57;//перевод в проценты.
 2e0:	65 b1       	in	r22, 0x05	; 5
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	88 27       	eor	r24, r24
 2e6:	77 fd       	sbrc	r23, 7
 2e8:	80 95       	com	r24
 2ea:	98 2f       	mov	r25, r24
 2ec:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__floatsisf>
 2f0:	21 ee       	ldi	r18, 0xE1	; 225
 2f2:	3a e7       	ldi	r19, 0x7A	; 122
 2f4:	44 e2       	ldi	r20, 0x24	; 36
 2f6:	50 e4       	ldi	r21, 0x40	; 64
 2f8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divsf3>
 2fc:	60 93 16 01 	sts	0x0116, r22
 300:	70 93 17 01 	sts	0x0117, r23
 304:	80 93 18 01 	sts	0x0118, r24
 308:	90 93 19 01 	sts	0x0119, r25
	
}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0b be       	out	0x3b, r0	; 59
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <INITtimer>:


void INITtimer() //инициализация таймер
{ 
 TCCR1B = (0<<CS12)|(0<<CS11)|(1<<CS10); // настраиваем делитель 1024
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	8e bd       	out	0x2e, r24	; 46
// TCCR1B = (0<<CS12)|(0<<CS11)|(1<<CS10);// делитель 1
 
 TIMSK |= (1<<TOIE1); // разрешаем прерывание по переполнению таймера
 336:	87 b7       	in	r24, 0x37	; 55
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	87 bf       	out	0x37, r24	; 55
 TCNT1 = 6380;        // выставляем начальное значение TCNT1 для 100Гц
 33c:	8c ee       	ldi	r24, 0xEC	; 236
 33e:	98 e1       	ldi	r25, 0x18	; 24
 340:	9d bd       	out	0x2d, r25	; 45
 342:	8c bd       	out	0x2c, r24	; 44
 
}
 344:	08 95       	ret

00000346 <INITADC>:

void INITADC() //Инициализация АЦП
{
	ADMUX |= (0<<REFS1)|(1<<REFS0);// Опорное напряжение AVCC
 346:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= (0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0); //Выбор АЦП
 348:	87 b1       	in	r24, 0x07	; 7
 34a:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<ADLAR);//Выравнивание по левому краю результата
 34c:	3d 9a       	sbi	0x07, 5	; 7
	ADCSRA |= (1<<ADEN);//Вкл АЦП
 34e:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//Делитель частоты 128
 350:	86 b1       	in	r24, 0x06	; 6
 352:	87 60       	ori	r24, 0x07	; 7
 354:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADIE);// Разрешить прерывания
 356:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= (1<<ADFR);//Срабатывает вручную
 358:	35 9a       	sbi	0x06, 5	; 6
	ADCSRA |= (1<<ADSC);//Запуск 1го преобразования
 35a:	36 9a       	sbi	0x06, 6	; 6
	
}
 35c:	08 95       	ret

0000035e <INIT>:

void INIT() //инициализация кнопок и констант
{
PORTB=0; DDRB=0xff;//Выход Дисплей
 35e:	18 ba       	out	0x18, r1	; 24
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	87 bb       	out	0x17, r24	; 23
PORTG=0; DDRG=0b11;//Вывод переключатель дисплея
 364:	10 92 65 00 	sts	0x0065, r1
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	90 93 64 00 	sts	0x0064, r25
PORTA=0; DDRA=0; //Вход кнопки
 36e:	1b ba       	out	0x1b, r1	; 27
 370:	1a ba       	out	0x1a, r1	; 26
PORTC=0; DDRC=0xff; //Выход светодиоды
 372:	15 ba       	out	0x15, r1	; 21
 374:	84 bb       	out	0x14, r24	; 20
PORTE=0; DDRE=0xff; //Выход Реле и Ключ
 376:	13 b8       	out	0x03, r1	; 3
 378:	82 b9       	out	0x02, r24	; 2
}
 37a:	08 95       	ret

0000037c <main>:




int main(void)
{
 37c:	bf 92       	push	r11
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29

INIT();														
 38e:	0e 94 af 01 	call	0x35e	; 0x35e <INIT>
INITADC();
 392:	0e 94 a3 01 	call	0x346	; 0x346 <INITADC>
INITtimer();
 396:	0e 94 99 01 	call	0x332	; 0x332 <INITtimer>

sei();                // выставляем бит общего разрешения прерыва
 39a:	78 94       	sei
unsigned int ACP=1;
PORTC=1;//1й светодиод актуатора1
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	85 bb       	out	0x15, r24	; 21
INIT();														
INITADC();
INITtimer();

sei();                // выставляем бит общего разрешения прерыва
unsigned int ACP=1;
 3a0:	c1 e0       	ldi	r28, 0x01	; 1
 3a2:	d0 e0       	ldi	r29, 0x00	; 0
		{
		case (1): ADMUX ^= (1<<MUX1)|(1<<MUX0);//Выбор АЦП1
		PORTC=0b0001;//1й светодиод актуатора1
		break;
		case (2): ADMUX |= (1<<MUX0); //Выбор АЦП2
		PORTC=0b0010;//2й светодиод актуатора1
 3a4:	02 e0       	ldi	r16, 0x02	; 2
		break;
		case (3): ADMUX ^= (1<<MUX1)|(1<<MUX0); //Выбор АЦП3
 3a6:	13 e0       	ldi	r17, 0x03	; 3
		PORTC=0b0100;//3й светодиод актуатора1
 3a8:	dd 24       	eor	r13, r13
 3aa:	68 94       	set
 3ac:	d2 f8       	bld	r13, 2
		break;
		case (4): ADMUX |= (1<<MUX0); //Выбор АЦП4
		ACP=0;
		PORTC=0b1000;//4й светодиод актуатора1
 3ae:	cc 24       	eor	r12, r12
 3b0:	68 94       	set
 3b2:	c3 f8       	bld	r12, 3
		break;
		case (3): ADMUX ^= (1<<MUX1)|(1<<MUX0); //Выбор АЦП3
		PORTC=0b0100;//3й светодиод актуатора1
		break;
		case (4): ADMUX |= (1<<MUX0); //Выбор АЦП4
		ACP=0;
 3b4:	ee 24       	eor	r14, r14
 3b6:	ff 24       	eor	r15, r15
	ACP=ACP+1;
		
	switch(ACP)
		{
		case (1): ADMUX ^= (1<<MUX1)|(1<<MUX0);//Выбор АЦП1
		PORTC=0b0001;//1й светодиод актуатора1
 3b8:	bb 24       	eor	r11, r11
 3ba:	b3 94       	inc	r11
sei();                // выставляем бит общего разрешения прерыва
unsigned int ACP=1;
PORTC=1;//1й светодиод актуатора1
while (1)
{
	i=PINA; //Считываем порт ввода
 3bc:	89 b3       	in	r24, 0x19	; 25
 3be:	80 93 1e 01 	sts	0x011E, r24
 3c2:	10 92 1f 01 	sts	0x011F, r1

	if ((i & (1<<0)) == 0 ) //Проверка нажатия кнопки переключения АЦП
 3c6:	80 fd       	sbrc	r24, 0
 3c8:	2e c0       	rjmp	.+92     	; 0x426 <main+0xaa>
	{
	
	ADCSRA &= (~(1<<ADEN));//Выкл АЦП
 3ca:	37 98       	cbi	0x06, 7	; 6
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	93 ec       	ldi	r25, 0xC3	; 195
 3d0:	a9 e0       	ldi	r26, 0x09	; 9
 3d2:	81 50       	subi	r24, 0x01	; 1
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	a0 40       	sbci	r26, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x56>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x60>
 3dc:	00 00       	nop
	_delay_ms(200);
	ACP=ACP+1;
 3de:	21 96       	adiw	r28, 0x01	; 1
		
	switch(ACP)
 3e0:	c2 30       	cpi	r28, 0x02	; 2
 3e2:	d1 05       	cpc	r29, r1
 3e4:	99 f0       	breq	.+38     	; 0x40c <main+0x90>
 3e6:	c3 30       	cpi	r28, 0x03	; 3
 3e8:	d1 05       	cpc	r29, r1
 3ea:	20 f4       	brcc	.+8      	; 0x3f4 <main+0x78>
 3ec:	c1 30       	cpi	r28, 0x01	; 1
 3ee:	d1 05       	cpc	r29, r1
 3f0:	c1 f4       	brne	.+48     	; 0x422 <main+0xa6>
 3f2:	07 c0       	rjmp	.+14     	; 0x402 <main+0x86>
 3f4:	c3 30       	cpi	r28, 0x03	; 3
 3f6:	d1 05       	cpc	r29, r1
 3f8:	61 f0       	breq	.+24     	; 0x412 <main+0x96>
 3fa:	c4 30       	cpi	r28, 0x04	; 4
 3fc:	d1 05       	cpc	r29, r1
 3fe:	89 f4       	brne	.+34     	; 0x422 <main+0xa6>
 400:	0d c0       	rjmp	.+26     	; 0x41c <main+0xa0>
		{
		case (1): ADMUX ^= (1<<MUX1)|(1<<MUX0);//Выбор АЦП1
 402:	87 b1       	in	r24, 0x07	; 7
 404:	81 27       	eor	r24, r17
 406:	87 b9       	out	0x07, r24	; 7
		PORTC=0b0001;//1й светодиод актуатора1
 408:	b5 ba       	out	0x15, r11	; 21
		break;
 40a:	0b c0       	rjmp	.+22     	; 0x422 <main+0xa6>
		case (2): ADMUX |= (1<<MUX0); //Выбор АЦП2
 40c:	38 9a       	sbi	0x07, 0	; 7
		PORTC=0b0010;//2й светодиод актуатора1
 40e:	05 bb       	out	0x15, r16	; 21
		break;
 410:	08 c0       	rjmp	.+16     	; 0x422 <main+0xa6>
		case (3): ADMUX ^= (1<<MUX1)|(1<<MUX0); //Выбор АЦП3
 412:	87 b1       	in	r24, 0x07	; 7
 414:	81 27       	eor	r24, r17
 416:	87 b9       	out	0x07, r24	; 7
		PORTC=0b0100;//3й светодиод актуатора1
 418:	d5 ba       	out	0x15, r13	; 21
		break;
 41a:	03 c0       	rjmp	.+6      	; 0x422 <main+0xa6>
		case (4): ADMUX |= (1<<MUX0); //Выбор АЦП4
 41c:	38 9a       	sbi	0x07, 0	; 7
		ACP=0;
		PORTC=0b1000;//4й светодиод актуатора1
 41e:	c5 ba       	out	0x15, r12	; 21
		break;
		case (3): ADMUX ^= (1<<MUX1)|(1<<MUX0); //Выбор АЦП3
		PORTC=0b0100;//3й светодиод актуатора1
		break;
		case (4): ADMUX |= (1<<MUX0); //Выбор АЦП4
		ACP=0;
 420:	e7 01       	movw	r28, r14
		PORTC=0b1000;//4й светодиод актуатора1
		break;
		}
	ADCSRA |= (1<<ADEN);//Вкл АЦП	
 422:	37 9a       	sbi	0x06, 7	; 6
	//ADCSRA |= (1<<ADFR);//Срабатывает вручную
	ADCSRA |= (1<<ADSC);//Запуск 1го преобразования
 424:	36 9a       	sbi	0x06, 6	; 6
		}
	
	if ((i & (1<<1)) == 0 ) //Проверка нажатия кнопки Ручной режим
 426:	80 91 1e 01 	lds	r24, 0x011E
 42a:	81 fd       	sbrc	r24, 1
 42c:	c7 cf       	rjmp	.-114    	; 0x3bc <main+0x40>
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	93 ec       	ldi	r25, 0xC3	; 195
 432:	a9 e0       	ldi	r26, 0x09	; 9
 434:	81 50       	subi	r24, 0x01	; 1
 436:	90 40       	sbci	r25, 0x00	; 0
 438:	a0 40       	sbci	r26, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <main+0xb8>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <main+0xc2>
 43e:	00 00       	nop
	{
		_delay_ms(200);
		
			if ((i & (1<<2)) == 0 ) //Проверка нажатия кнопки Вперед
 440:	80 91 1e 01 	lds	r24, 0x011E
 444:	82 fd       	sbrc	r24, 2
 446:	2d c0       	rjmp	.+90     	; 0x4a2 <main+0x126>
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	93 ec       	ldi	r25, 0xC3	; 195
 44c:	a9 e0       	ldi	r26, 0x09	; 9
 44e:	81 50       	subi	r24, 0x01	; 1
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	a0 40       	sbci	r26, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <main+0xd2>
 456:	00 c0       	rjmp	.+0      	; 0x458 <main+0xdc>
 458:	00 00       	nop
		{
			_delay_ms(200);
			switch(ACP)
 45a:	c2 30       	cpi	r28, 0x02	; 2
 45c:	d1 05       	cpc	r29, r1
 45e:	81 f0       	breq	.+32     	; 0x480 <main+0x104>
 460:	c3 30       	cpi	r28, 0x03	; 3
 462:	d1 05       	cpc	r29, r1
 464:	20 f4       	brcc	.+8      	; 0x46e <main+0xf2>
 466:	c1 30       	cpi	r28, 0x01	; 1
 468:	d1 05       	cpc	r29, r1
 46a:	79 f4       	brne	.+30     	; 0x48a <main+0x10e>
 46c:	07 c0       	rjmp	.+14     	; 0x47c <main+0x100>
 46e:	c3 30       	cpi	r28, 0x03	; 3
 470:	d1 05       	cpc	r29, r1
 472:	41 f0       	breq	.+16     	; 0x484 <main+0x108>
 474:	c4 30       	cpi	r28, 0x04	; 4
 476:	d1 05       	cpc	r29, r1
 478:	41 f4       	brne	.+16     	; 0x48a <main+0x10e>
 47a:	06 c0       	rjmp	.+12     	; 0x488 <main+0x10c>
				{
					case (1): PORTE|=(1<<PE2);
 47c:	1a 9a       	sbi	0x03, 2	; 3
					break;
 47e:	05 c0       	rjmp	.+10     	; 0x48a <main+0x10e>
					case (2): PORTE|=(1<<PE3);
 480:	1b 9a       	sbi	0x03, 3	; 3
					break;
 482:	03 c0       	rjmp	.+6      	; 0x48a <main+0x10e>
					case (3): PORTE|=(1<<PE4);
 484:	1c 9a       	sbi	0x03, 4	; 3
					break;
 486:	01 c0       	rjmp	.+2      	; 0x48a <main+0x10e>
					case (4): PORTE|=(1<<PE5);
 488:	1d 9a       	sbi	0x03, 5	; 3
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	93 ec       	ldi	r25, 0xC3	; 195
 48e:	a9 e0       	ldi	r26, 0x09	; 9
 490:	81 50       	subi	r24, 0x01	; 1
 492:	90 40       	sbci	r25, 0x00	; 0
 494:	a0 40       	sbci	r26, 0x00	; 0
 496:	e1 f7       	brne	.-8      	; 0x490 <main+0x114>
 498:	00 c0       	rjmp	.+0      	; 0x49a <main+0x11e>
 49a:	00 00       	nop
					break;
				}
			_delay_ms(200);
			PORTE|=(1<<6); //Подаем на ключ PE6
 49c:	1e 9a       	sbi	0x03, 6	; 3
			Stop();
 49e:	0e 94 67 00 	call	0xce	; 0xce <Stop>
		}	
			if ((i & (1<<3)) == 0 ) //Проверка нажатия кнопки Назад
 4a2:	80 91 1e 01 	lds	r24, 0x011E
 4a6:	83 fd       	sbrc	r24, 3
 4a8:	89 cf       	rjmp	.-238    	; 0x3bc <main+0x40>
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	93 ec       	ldi	r25, 0xC3	; 195
 4ae:	a9 e0       	ldi	r26, 0x09	; 9
 4b0:	81 50       	subi	r24, 0x01	; 1
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	a0 40       	sbci	r26, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <main+0x134>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <main+0x13e>
 4ba:	00 00       	nop
		{
			_delay_ms(200);
			switch(ACP)
 4bc:	c2 30       	cpi	r28, 0x02	; 2
 4be:	d1 05       	cpc	r29, r1
 4c0:	81 f0       	breq	.+32     	; 0x4e2 <main+0x166>
 4c2:	c3 30       	cpi	r28, 0x03	; 3
 4c4:	d1 05       	cpc	r29, r1
 4c6:	20 f4       	brcc	.+8      	; 0x4d0 <main+0x154>
 4c8:	c1 30       	cpi	r28, 0x01	; 1
 4ca:	d1 05       	cpc	r29, r1
 4cc:	79 f4       	brne	.+30     	; 0x4ec <main+0x170>
 4ce:	07 c0       	rjmp	.+14     	; 0x4de <main+0x162>
 4d0:	c3 30       	cpi	r28, 0x03	; 3
 4d2:	d1 05       	cpc	r29, r1
 4d4:	41 f0       	breq	.+16     	; 0x4e6 <main+0x16a>
 4d6:	c4 30       	cpi	r28, 0x04	; 4
 4d8:	d1 05       	cpc	r29, r1
 4da:	41 f4       	brne	.+16     	; 0x4ec <main+0x170>
 4dc:	06 c0       	rjmp	.+12     	; 0x4ea <main+0x16e>
				{
					case (1): PORTE|=(1<<PE2);
 4de:	1a 9a       	sbi	0x03, 2	; 3
					break;
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <main+0x170>
					case (2): PORTE|=(1<<PE3);
 4e2:	1b 9a       	sbi	0x03, 3	; 3
					break;
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <main+0x170>
					case (3): PORTE|=(1<<PE4);
 4e6:	1c 9a       	sbi	0x03, 4	; 3
					break;
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <main+0x170>
					case (4): PORTE|=(1<<PE5);
 4ea:	1d 9a       	sbi	0x03, 5	; 3
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	93 ec       	ldi	r25, 0xC3	; 195
 4f0:	a9 e0       	ldi	r26, 0x09	; 9
 4f2:	81 50       	subi	r24, 0x01	; 1
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	a0 40       	sbci	r26, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <main+0x176>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <main+0x180>
 4fc:	00 00       	nop
					break;
				}
			_delay_ms(200);			
			PORTE|=(1<<7); //Подаем на ключ PE7
 4fe:	1f 9a       	sbi	0x03, 7	; 3
			Stop();
 500:	0e 94 67 00 	call	0xce	; 0xce <Stop>
 504:	5b cf       	rjmp	.-330    	; 0x3bc <main+0x40>

00000506 <__subsf3>:
 506:	50 58       	subi	r21, 0x80	; 128

00000508 <__addsf3>:
 508:	bb 27       	eor	r27, r27
 50a:	aa 27       	eor	r26, r26
 50c:	0e d0       	rcall	.+28     	; 0x52a <__addsf3x>
 50e:	48 c1       	rjmp	.+656    	; 0x7a0 <__fp_round>
 510:	39 d1       	rcall	.+626    	; 0x784 <__fp_pscA>
 512:	30 f0       	brcs	.+12     	; 0x520 <__addsf3+0x18>
 514:	3e d1       	rcall	.+636    	; 0x792 <__fp_pscB>
 516:	20 f0       	brcs	.+8      	; 0x520 <__addsf3+0x18>
 518:	31 f4       	brne	.+12     	; 0x526 <__addsf3+0x1e>
 51a:	9f 3f       	cpi	r25, 0xFF	; 255
 51c:	11 f4       	brne	.+4      	; 0x522 <__addsf3+0x1a>
 51e:	1e f4       	brtc	.+6      	; 0x526 <__addsf3+0x1e>
 520:	2e c1       	rjmp	.+604    	; 0x77e <__fp_nan>
 522:	0e f4       	brtc	.+2      	; 0x526 <__addsf3+0x1e>
 524:	e0 95       	com	r30
 526:	e7 fb       	bst	r30, 7
 528:	24 c1       	rjmp	.+584    	; 0x772 <__fp_inf>

0000052a <__addsf3x>:
 52a:	e9 2f       	mov	r30, r25
 52c:	4a d1       	rcall	.+660    	; 0x7c2 <__fp_split3>
 52e:	80 f3       	brcs	.-32     	; 0x510 <__addsf3+0x8>
 530:	ba 17       	cp	r27, r26
 532:	62 07       	cpc	r22, r18
 534:	73 07       	cpc	r23, r19
 536:	84 07       	cpc	r24, r20
 538:	95 07       	cpc	r25, r21
 53a:	18 f0       	brcs	.+6      	; 0x542 <__addsf3x+0x18>
 53c:	71 f4       	brne	.+28     	; 0x55a <__addsf3x+0x30>
 53e:	9e f5       	brtc	.+102    	; 0x5a6 <__addsf3x+0x7c>
 540:	62 c1       	rjmp	.+708    	; 0x806 <__fp_zero>
 542:	0e f4       	brtc	.+2      	; 0x546 <__addsf3x+0x1c>
 544:	e0 95       	com	r30
 546:	0b 2e       	mov	r0, r27
 548:	ba 2f       	mov	r27, r26
 54a:	a0 2d       	mov	r26, r0
 54c:	0b 01       	movw	r0, r22
 54e:	b9 01       	movw	r22, r18
 550:	90 01       	movw	r18, r0
 552:	0c 01       	movw	r0, r24
 554:	ca 01       	movw	r24, r20
 556:	a0 01       	movw	r20, r0
 558:	11 24       	eor	r1, r1
 55a:	ff 27       	eor	r31, r31
 55c:	59 1b       	sub	r21, r25
 55e:	99 f0       	breq	.+38     	; 0x586 <__addsf3x+0x5c>
 560:	59 3f       	cpi	r21, 0xF9	; 249
 562:	50 f4       	brcc	.+20     	; 0x578 <__addsf3x+0x4e>
 564:	50 3e       	cpi	r21, 0xE0	; 224
 566:	68 f1       	brcs	.+90     	; 0x5c2 <__addsf3x+0x98>
 568:	1a 16       	cp	r1, r26
 56a:	f0 40       	sbci	r31, 0x00	; 0
 56c:	a2 2f       	mov	r26, r18
 56e:	23 2f       	mov	r18, r19
 570:	34 2f       	mov	r19, r20
 572:	44 27       	eor	r20, r20
 574:	58 5f       	subi	r21, 0xF8	; 248
 576:	f3 cf       	rjmp	.-26     	; 0x55e <__addsf3x+0x34>
 578:	46 95       	lsr	r20
 57a:	37 95       	ror	r19
 57c:	27 95       	ror	r18
 57e:	a7 95       	ror	r26
 580:	f0 40       	sbci	r31, 0x00	; 0
 582:	53 95       	inc	r21
 584:	c9 f7       	brne	.-14     	; 0x578 <__addsf3x+0x4e>
 586:	7e f4       	brtc	.+30     	; 0x5a6 <__addsf3x+0x7c>
 588:	1f 16       	cp	r1, r31
 58a:	ba 0b       	sbc	r27, r26
 58c:	62 0b       	sbc	r22, r18
 58e:	73 0b       	sbc	r23, r19
 590:	84 0b       	sbc	r24, r20
 592:	ba f0       	brmi	.+46     	; 0x5c2 <__addsf3x+0x98>
 594:	91 50       	subi	r25, 0x01	; 1
 596:	a1 f0       	breq	.+40     	; 0x5c0 <__addsf3x+0x96>
 598:	ff 0f       	add	r31, r31
 59a:	bb 1f       	adc	r27, r27
 59c:	66 1f       	adc	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	88 1f       	adc	r24, r24
 5a2:	c2 f7       	brpl	.-16     	; 0x594 <__addsf3x+0x6a>
 5a4:	0e c0       	rjmp	.+28     	; 0x5c2 <__addsf3x+0x98>
 5a6:	ba 0f       	add	r27, r26
 5a8:	62 1f       	adc	r22, r18
 5aa:	73 1f       	adc	r23, r19
 5ac:	84 1f       	adc	r24, r20
 5ae:	48 f4       	brcc	.+18     	; 0x5c2 <__addsf3x+0x98>
 5b0:	87 95       	ror	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b7 95       	ror	r27
 5b8:	f7 95       	ror	r31
 5ba:	9e 3f       	cpi	r25, 0xFE	; 254
 5bc:	08 f0       	brcs	.+2      	; 0x5c0 <__addsf3x+0x96>
 5be:	b3 cf       	rjmp	.-154    	; 0x526 <__addsf3+0x1e>
 5c0:	93 95       	inc	r25
 5c2:	88 0f       	add	r24, r24
 5c4:	08 f0       	brcs	.+2      	; 0x5c8 <__addsf3x+0x9e>
 5c6:	99 27       	eor	r25, r25
 5c8:	ee 0f       	add	r30, r30
 5ca:	97 95       	ror	r25
 5cc:	87 95       	ror	r24
 5ce:	08 95       	ret

000005d0 <__divsf3>:
 5d0:	0c d0       	rcall	.+24     	; 0x5ea <__divsf3x>
 5d2:	e6 c0       	rjmp	.+460    	; 0x7a0 <__fp_round>
 5d4:	de d0       	rcall	.+444    	; 0x792 <__fp_pscB>
 5d6:	40 f0       	brcs	.+16     	; 0x5e8 <__divsf3+0x18>
 5d8:	d5 d0       	rcall	.+426    	; 0x784 <__fp_pscA>
 5da:	30 f0       	brcs	.+12     	; 0x5e8 <__divsf3+0x18>
 5dc:	21 f4       	brne	.+8      	; 0x5e6 <__divsf3+0x16>
 5de:	5f 3f       	cpi	r21, 0xFF	; 255
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <__divsf3+0x18>
 5e2:	c7 c0       	rjmp	.+398    	; 0x772 <__fp_inf>
 5e4:	51 11       	cpse	r21, r1
 5e6:	10 c1       	rjmp	.+544    	; 0x808 <__fp_szero>
 5e8:	ca c0       	rjmp	.+404    	; 0x77e <__fp_nan>

000005ea <__divsf3x>:
 5ea:	eb d0       	rcall	.+470    	; 0x7c2 <__fp_split3>
 5ec:	98 f3       	brcs	.-26     	; 0x5d4 <__divsf3+0x4>

000005ee <__divsf3_pse>:
 5ee:	99 23       	and	r25, r25
 5f0:	c9 f3       	breq	.-14     	; 0x5e4 <__divsf3+0x14>
 5f2:	55 23       	and	r21, r21
 5f4:	b1 f3       	breq	.-20     	; 0x5e2 <__divsf3+0x12>
 5f6:	95 1b       	sub	r25, r21
 5f8:	55 0b       	sbc	r21, r21
 5fa:	bb 27       	eor	r27, r27
 5fc:	aa 27       	eor	r26, r26
 5fe:	62 17       	cp	r22, r18
 600:	73 07       	cpc	r23, r19
 602:	84 07       	cpc	r24, r20
 604:	38 f0       	brcs	.+14     	; 0x614 <__divsf3_pse+0x26>
 606:	9f 5f       	subi	r25, 0xFF	; 255
 608:	5f 4f       	sbci	r21, 0xFF	; 255
 60a:	22 0f       	add	r18, r18
 60c:	33 1f       	adc	r19, r19
 60e:	44 1f       	adc	r20, r20
 610:	aa 1f       	adc	r26, r26
 612:	a9 f3       	breq	.-22     	; 0x5fe <__divsf3_pse+0x10>
 614:	33 d0       	rcall	.+102    	; 0x67c <__divsf3_pse+0x8e>
 616:	0e 2e       	mov	r0, r30
 618:	3a f0       	brmi	.+14     	; 0x628 <__divsf3_pse+0x3a>
 61a:	e0 e8       	ldi	r30, 0x80	; 128
 61c:	30 d0       	rcall	.+96     	; 0x67e <__divsf3_pse+0x90>
 61e:	91 50       	subi	r25, 0x01	; 1
 620:	50 40       	sbci	r21, 0x00	; 0
 622:	e6 95       	lsr	r30
 624:	00 1c       	adc	r0, r0
 626:	ca f7       	brpl	.-14     	; 0x61a <__divsf3_pse+0x2c>
 628:	29 d0       	rcall	.+82     	; 0x67c <__divsf3_pse+0x8e>
 62a:	fe 2f       	mov	r31, r30
 62c:	27 d0       	rcall	.+78     	; 0x67c <__divsf3_pse+0x8e>
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	bb 1f       	adc	r27, r27
 636:	26 17       	cp	r18, r22
 638:	37 07       	cpc	r19, r23
 63a:	48 07       	cpc	r20, r24
 63c:	ab 07       	cpc	r26, r27
 63e:	b0 e8       	ldi	r27, 0x80	; 128
 640:	09 f0       	breq	.+2      	; 0x644 <__divsf3_pse+0x56>
 642:	bb 0b       	sbc	r27, r27
 644:	80 2d       	mov	r24, r0
 646:	bf 01       	movw	r22, r30
 648:	ff 27       	eor	r31, r31
 64a:	93 58       	subi	r25, 0x83	; 131
 64c:	5f 4f       	sbci	r21, 0xFF	; 255
 64e:	2a f0       	brmi	.+10     	; 0x65a <__divsf3_pse+0x6c>
 650:	9e 3f       	cpi	r25, 0xFE	; 254
 652:	51 05       	cpc	r21, r1
 654:	68 f0       	brcs	.+26     	; 0x670 <__divsf3_pse+0x82>
 656:	8d c0       	rjmp	.+282    	; 0x772 <__fp_inf>
 658:	d7 c0       	rjmp	.+430    	; 0x808 <__fp_szero>
 65a:	5f 3f       	cpi	r21, 0xFF	; 255
 65c:	ec f3       	brlt	.-6      	; 0x658 <__divsf3_pse+0x6a>
 65e:	98 3e       	cpi	r25, 0xE8	; 232
 660:	dc f3       	brlt	.-10     	; 0x658 <__divsf3_pse+0x6a>
 662:	86 95       	lsr	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b7 95       	ror	r27
 66a:	f7 95       	ror	r31
 66c:	9f 5f       	subi	r25, 0xFF	; 255
 66e:	c9 f7       	brne	.-14     	; 0x662 <__divsf3_pse+0x74>
 670:	88 0f       	add	r24, r24
 672:	91 1d       	adc	r25, r1
 674:	96 95       	lsr	r25
 676:	87 95       	ror	r24
 678:	97 f9       	bld	r25, 7
 67a:	08 95       	ret
 67c:	e1 e0       	ldi	r30, 0x01	; 1
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	bb 1f       	adc	r27, r27
 686:	62 17       	cp	r22, r18
 688:	73 07       	cpc	r23, r19
 68a:	84 07       	cpc	r24, r20
 68c:	ba 07       	cpc	r27, r26
 68e:	20 f0       	brcs	.+8      	; 0x698 <__divsf3_pse+0xaa>
 690:	62 1b       	sub	r22, r18
 692:	73 0b       	sbc	r23, r19
 694:	84 0b       	sbc	r24, r20
 696:	ba 0b       	sbc	r27, r26
 698:	ee 1f       	adc	r30, r30
 69a:	88 f7       	brcc	.-30     	; 0x67e <__divsf3_pse+0x90>
 69c:	e0 95       	com	r30
 69e:	08 95       	ret

000006a0 <__fixunssfsi>:
 6a0:	98 d0       	rcall	.+304    	; 0x7d2 <__fp_splitA>
 6a2:	88 f0       	brcs	.+34     	; 0x6c6 <__fixunssfsi+0x26>
 6a4:	9f 57       	subi	r25, 0x7F	; 127
 6a6:	90 f0       	brcs	.+36     	; 0x6cc <__fixunssfsi+0x2c>
 6a8:	b9 2f       	mov	r27, r25
 6aa:	99 27       	eor	r25, r25
 6ac:	b7 51       	subi	r27, 0x17	; 23
 6ae:	a0 f0       	brcs	.+40     	; 0x6d8 <__fixunssfsi+0x38>
 6b0:	d1 f0       	breq	.+52     	; 0x6e6 <__fixunssfsi+0x46>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	1a f0       	brmi	.+6      	; 0x6c2 <__fixunssfsi+0x22>
 6bc:	ba 95       	dec	r27
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <__fixunssfsi+0x12>
 6c0:	12 c0       	rjmp	.+36     	; 0x6e6 <__fixunssfsi+0x46>
 6c2:	b1 30       	cpi	r27, 0x01	; 1
 6c4:	81 f0       	breq	.+32     	; 0x6e6 <__fixunssfsi+0x46>
 6c6:	9f d0       	rcall	.+318    	; 0x806 <__fp_zero>
 6c8:	b1 e0       	ldi	r27, 0x01	; 1
 6ca:	08 95       	ret
 6cc:	9c c0       	rjmp	.+312    	; 0x806 <__fp_zero>
 6ce:	67 2f       	mov	r22, r23
 6d0:	78 2f       	mov	r23, r24
 6d2:	88 27       	eor	r24, r24
 6d4:	b8 5f       	subi	r27, 0xF8	; 248
 6d6:	39 f0       	breq	.+14     	; 0x6e6 <__fixunssfsi+0x46>
 6d8:	b9 3f       	cpi	r27, 0xF9	; 249
 6da:	cc f3       	brlt	.-14     	; 0x6ce <__fixunssfsi+0x2e>
 6dc:	86 95       	lsr	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	b3 95       	inc	r27
 6e4:	d9 f7       	brne	.-10     	; 0x6dc <__fixunssfsi+0x3c>
 6e6:	3e f4       	brtc	.+14     	; 0x6f6 <__fixunssfsi+0x56>
 6e8:	90 95       	com	r25
 6ea:	80 95       	com	r24
 6ec:	70 95       	com	r23
 6ee:	61 95       	neg	r22
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	8f 4f       	sbci	r24, 0xFF	; 255
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	08 95       	ret

000006f8 <__floatunsisf>:
 6f8:	e8 94       	clt
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <__floatsisf+0x12>

000006fc <__floatsisf>:
 6fc:	97 fb       	bst	r25, 7
 6fe:	3e f4       	brtc	.+14     	; 0x70e <__floatsisf+0x12>
 700:	90 95       	com	r25
 702:	80 95       	com	r24
 704:	70 95       	com	r23
 706:	61 95       	neg	r22
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	99 23       	and	r25, r25
 710:	a9 f0       	breq	.+42     	; 0x73c <__floatsisf+0x40>
 712:	f9 2f       	mov	r31, r25
 714:	96 e9       	ldi	r25, 0x96	; 150
 716:	bb 27       	eor	r27, r27
 718:	93 95       	inc	r25
 71a:	f6 95       	lsr	r31
 71c:	87 95       	ror	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f1 11       	cpse	r31, r1
 726:	f8 cf       	rjmp	.-16     	; 0x718 <__floatsisf+0x1c>
 728:	fa f4       	brpl	.+62     	; 0x768 <__floatsisf+0x6c>
 72a:	bb 0f       	add	r27, r27
 72c:	11 f4       	brne	.+4      	; 0x732 <__floatsisf+0x36>
 72e:	60 ff       	sbrs	r22, 0
 730:	1b c0       	rjmp	.+54     	; 0x768 <__floatsisf+0x6c>
 732:	6f 5f       	subi	r22, 0xFF	; 255
 734:	7f 4f       	sbci	r23, 0xFF	; 255
 736:	8f 4f       	sbci	r24, 0xFF	; 255
 738:	9f 4f       	sbci	r25, 0xFF	; 255
 73a:	16 c0       	rjmp	.+44     	; 0x768 <__floatsisf+0x6c>
 73c:	88 23       	and	r24, r24
 73e:	11 f0       	breq	.+4      	; 0x744 <__floatsisf+0x48>
 740:	96 e9       	ldi	r25, 0x96	; 150
 742:	11 c0       	rjmp	.+34     	; 0x766 <__floatsisf+0x6a>
 744:	77 23       	and	r23, r23
 746:	21 f0       	breq	.+8      	; 0x750 <__floatsisf+0x54>
 748:	9e e8       	ldi	r25, 0x8E	; 142
 74a:	87 2f       	mov	r24, r23
 74c:	76 2f       	mov	r23, r22
 74e:	05 c0       	rjmp	.+10     	; 0x75a <__floatsisf+0x5e>
 750:	66 23       	and	r22, r22
 752:	71 f0       	breq	.+28     	; 0x770 <__floatsisf+0x74>
 754:	96 e8       	ldi	r25, 0x86	; 134
 756:	86 2f       	mov	r24, r22
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	2a f0       	brmi	.+10     	; 0x768 <__floatsisf+0x6c>
 75e:	9a 95       	dec	r25
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	da f7       	brpl	.-10     	; 0x75e <__floatsisf+0x62>
 768:	88 0f       	add	r24, r24
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	97 f9       	bld	r25, 7
 770:	08 95       	ret

00000772 <__fp_inf>:
 772:	97 f9       	bld	r25, 7
 774:	9f 67       	ori	r25, 0x7F	; 127
 776:	80 e8       	ldi	r24, 0x80	; 128
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	08 95       	ret

0000077e <__fp_nan>:
 77e:	9f ef       	ldi	r25, 0xFF	; 255
 780:	80 ec       	ldi	r24, 0xC0	; 192
 782:	08 95       	ret

00000784 <__fp_pscA>:
 784:	00 24       	eor	r0, r0
 786:	0a 94       	dec	r0
 788:	16 16       	cp	r1, r22
 78a:	17 06       	cpc	r1, r23
 78c:	18 06       	cpc	r1, r24
 78e:	09 06       	cpc	r0, r25
 790:	08 95       	ret

00000792 <__fp_pscB>:
 792:	00 24       	eor	r0, r0
 794:	0a 94       	dec	r0
 796:	12 16       	cp	r1, r18
 798:	13 06       	cpc	r1, r19
 79a:	14 06       	cpc	r1, r20
 79c:	05 06       	cpc	r0, r21
 79e:	08 95       	ret

000007a0 <__fp_round>:
 7a0:	09 2e       	mov	r0, r25
 7a2:	03 94       	inc	r0
 7a4:	00 0c       	add	r0, r0
 7a6:	11 f4       	brne	.+4      	; 0x7ac <__fp_round+0xc>
 7a8:	88 23       	and	r24, r24
 7aa:	52 f0       	brmi	.+20     	; 0x7c0 <__fp_round+0x20>
 7ac:	bb 0f       	add	r27, r27
 7ae:	40 f4       	brcc	.+16     	; 0x7c0 <__fp_round+0x20>
 7b0:	bf 2b       	or	r27, r31
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <__fp_round+0x18>
 7b4:	60 ff       	sbrs	r22, 0
 7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <__fp_round+0x20>
 7b8:	6f 5f       	subi	r22, 0xFF	; 255
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	8f 4f       	sbci	r24, 0xFF	; 255
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	08 95       	ret

000007c2 <__fp_split3>:
 7c2:	57 fd       	sbrc	r21, 7
 7c4:	90 58       	subi	r25, 0x80	; 128
 7c6:	44 0f       	add	r20, r20
 7c8:	55 1f       	adc	r21, r21
 7ca:	59 f0       	breq	.+22     	; 0x7e2 <__fp_splitA+0x10>
 7cc:	5f 3f       	cpi	r21, 0xFF	; 255
 7ce:	71 f0       	breq	.+28     	; 0x7ec <__fp_splitA+0x1a>
 7d0:	47 95       	ror	r20

000007d2 <__fp_splitA>:
 7d2:	88 0f       	add	r24, r24
 7d4:	97 fb       	bst	r25, 7
 7d6:	99 1f       	adc	r25, r25
 7d8:	61 f0       	breq	.+24     	; 0x7f2 <__fp_splitA+0x20>
 7da:	9f 3f       	cpi	r25, 0xFF	; 255
 7dc:	79 f0       	breq	.+30     	; 0x7fc <__fp_splitA+0x2a>
 7de:	87 95       	ror	r24
 7e0:	08 95       	ret
 7e2:	12 16       	cp	r1, r18
 7e4:	13 06       	cpc	r1, r19
 7e6:	14 06       	cpc	r1, r20
 7e8:	55 1f       	adc	r21, r21
 7ea:	f2 cf       	rjmp	.-28     	; 0x7d0 <__fp_split3+0xe>
 7ec:	46 95       	lsr	r20
 7ee:	f1 df       	rcall	.-30     	; 0x7d2 <__fp_splitA>
 7f0:	08 c0       	rjmp	.+16     	; 0x802 <__fp_splitA+0x30>
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	18 06       	cpc	r1, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	f1 cf       	rjmp	.-30     	; 0x7de <__fp_splitA+0xc>
 7fc:	86 95       	lsr	r24
 7fe:	71 05       	cpc	r23, r1
 800:	61 05       	cpc	r22, r1
 802:	08 94       	sec
 804:	08 95       	ret

00000806 <__fp_zero>:
 806:	e8 94       	clt

00000808 <__fp_szero>:
 808:	bb 27       	eor	r27, r27
 80a:	66 27       	eor	r22, r22
 80c:	77 27       	eor	r23, r23
 80e:	cb 01       	movw	r24, r22
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret

00000814 <_exit>:
 814:	f8 94       	cli

00000816 <__stop_program>:
 816:	ff cf       	rjmp	.-2      	; 0x816 <__stop_program>
